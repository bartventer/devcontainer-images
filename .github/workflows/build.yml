name: Build

on:
  workflow_dispatch:
  schedule:
    # Every day at 00:00 UTC
    - cron: "0 0 * * *"
  workflow_run:
    workflows: ["Test"]
    branches: [master]
    types:
      - completed

jobs:
  build:
    if: ${{ contains(fromJSON('["workflow_dispatch", "schedule"]'), github.event_name) || github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' }}
    name: Build and Release
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ matrix.image-name }}
    permissions:
      contents: write
      packages: write
      pull-requests: write
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        image-name: ${{ fromJson(vars.IMAGE_NAMES_JSON) }}

    outputs:
      platforms: ${{ steps.platforms.outputs.platforms }}

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version-file: package.json
      - run: yarn install
      - name: Validate Metadata
        run: make metadata/validate

      - name: Get Platforms for ${{ matrix.image-name }}
        id: platforms
        run: |
          platforms=$(jq -r '.platforms | join(",")' src/${{ matrix.image-name }}/metadata.json)
          echo "platforms=$platforms" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0
        with:
          platforms: ${{ steps.platforms.outputs.platforms }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
        with:
          platforms: ${{ steps.platforms.outputs.platforms }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Import GPG key
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6.3.0
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Build and Push
        env:
          GH_ACTIONS_USERNAME: ${{ vars.GH_ACTIONS_USERNAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_KEY_ID: ${{ steps.import-gpg.outputs.keyid }}
        run: make devcontainer/build-push
