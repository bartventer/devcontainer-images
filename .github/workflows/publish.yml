# This workflow uses the `devcontainer` CLI to build the Docker image.
# We chose the `devcontainer` CLI because we need integration with Dev Containers in Visual Studio Code.
# As a result, we're not using Docker's `buildx` command for multi-architecture builds.
# This workflow will only build the image for the host architecture (x86-64).
name: Publish

on:
  workflow_dispatch:
    inputs:
      imageName:
        type: choice
        options:
          - 'archlinux'
          # ... add more images here
        description: 'The name of the image to build and push'
        required: true

jobs:
  build-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install devcontainer CLI
      run: |
        echo "üì¶ Installing devcontainer CLI..."
        npm install -g @devcontainers/cli
        echo "‚úÖ devcontainer CLI installed successfully."

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get latest version
      id: latest-version
      shell: bash
      run: |
        echo "üîç Getting the latest version of the image from GitHub Container Registry..."
        LATEST_VERSION=$(curl -s https://ghcr.io/v2/${{ github.repository_owner }}/${{ github.event.inputs.imageName }}/tags/list | jq -r '.tags[]' | sort -V | tail -n 1 || echo "0.0.0")
        echo "‚úÖ Latest version: $LATEST_VERSION"
        echo "::set-output name=version::${LATEST_VERSION}"
            
    - name: Compare versions
      id: compare-versions
      shell: bash
      run: |
        echo "üîç Comparing the new version with the latest version..."
        VERSION=$(cat src/${{ github.event.inputs.imageName }}/VERSION)
        LATEST_VERSION=${{ steps.latest-version.outputs.version }}
        echo "üÜï New version: $VERSION"
        echo "üîµ Latest version: $LATEST_VERSION"
        if [[ $(printf '%s\n' "$VERSION" "$LATEST_VERSION" | sort -V | head -n 1) = "$LATEST_VERSION" ]]; then
          echo "::set-output name=valid::false"
          echo "‚ùå Error: The new version ($VERSION) is not larger than the current version ($LATEST_VERSION)."
        else
          echo "::set-output name=valid::true"
          echo "::set-output name=version::${VERSION}"
          echo "‚úÖ The new version ($VERSION) is larger than the current version ($LATEST_VERSION). Proceeding with the build..."
        fi
      
    - name: Build Docker image for x86-64 on ${{ github.event.inputs.imageName }}
      if: steps.compare-versions.outputs.valid == 'true'
      shell: bash
      env:
        DOCKER_BUILDKIT: 1
      run: |
        echo "üèóÔ∏è Building Docker image for x86-64 on ${{ github.event.inputs.imageName }}..."
        cd src/${{ github.event.inputs.imageName }}/.devcontainer
        # Build the image for the new version and the latest version
        for tag in ${{ steps.compare-versions.outputs.version }} latest; do
          devcontainer build --tag ghcr.io/${{ github.repository_owner }}/${{ github.event.inputs.imageName }}:$tag
          echo "‚úÖ Docker image built successfully for tag $tag."
        done
      
    - name: Push Docker image for x86-64 on ${{ github.event.inputs.imageName }}
      shell: bash
      run: |
        echo "üöÄ Pushing Docker image for x86-64 on ${{ github.event.inputs.imageName }}..."
        # Push the image for the new version and the latest version
        for tag in ${{ steps.compare-versions.outputs.version }} latest; do
          docker push ghcr.io/${{ github.repository_owner }}/${{ github.event.inputs.imageName }}:$tag
          echo "‚úÖ Docker image pushed successfully for tag $tag."
        done